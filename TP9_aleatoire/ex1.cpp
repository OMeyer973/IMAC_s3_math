#include <iostream>
#include <random>
#include <chrono>
#include <functional> // for bind
#include <math.h>
// g++ -Wall -std=c++11 ex1.cpp && ./a.out

// combines :
// - generators (Objects that generate uniformly distributed numbers) 
// - and distributions (Objects that transform sequences of numbers generated by a generator into sequences of numbers that follow a specific random variable distribution, such as uniform, Normal or Binomial.)

int main()
{

  // select seed from time
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::cout << "seed : " << seed << std::endl;
  
  // select a random generator engine
  std::default_random_engine generator(seed);

  // throwing rays in a square of 1x1. checking how much are within a quarter of a circle
  // radius
  double a = sqrt(2);

  // uniform real distribution
  std::cout << std::endl << "uniform real distribution 1-" << a << std::endl;
  std::uniform_real_distribution<float> uniformRealDistribution(0,a);
  
  double x = 0, y = 0;
  int nbDots = 10000000;
  int inCircle = 0;
  
  for(int i=0; i<nbDots; ++i) {
    x = uniformRealDistribution(generator);
    y = uniformRealDistribution(generator);
    if ((x*x + y*y) < a*a) {
      inCircle ++;
    }
  }
  std::cout << "inCircle : " << inCircle << std::endl;
  // surface = pi*r*r
  // quarter surface = pi/4*r*r

  // inCircle / nbDots = pi*r*r/4
  // inCircle / nbDots = pi/4 (r = 1)
  double pi = 4 * (double) inCircle / (double)nbDots;
  std::cout << "pi : " << pi << std::endl;
  std::cout << "pi-M_PI : " << pi-M_PI << std::endl;
  return 0;
}
