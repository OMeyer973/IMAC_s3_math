#include <iostream>
#include <random>
#include <chrono>
#include <functional> // for bind
#include <cmath>

// g++ -Wall -std=c++11 ex1.cpp && ./a.out

// combines :
// - generators (Objects that generate uniformly distributed numbers) 
// - and distributions (Objects that transform sequences of numbers generated by a generator into sequences of numbers that follow a specific random variable distribution, such as uniform, Normal or Binomial.)

void swap (double& a, double& b) {
  double c = b;
  b = a;
  a = c;
}

int main()
{

  // select seed from time
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::cout << "seed : " << seed << std::endl;
  
  // select a random generator engine
  std::default_random_engine generator(seed);

  // breaking a line in 3. can we make a triangle with the 3 parts ?  
  // test : are the 3 parts length < tot length / 3
  double l = 2000000000;
  // uniform real distribution
  std::cout << std::endl << "uniform real distribution (0,1)" << std::endl;
  std::uniform_real_distribution<float> uniformRealDistribution(0,l);
  // break points
  double a = 0, b = 0;
  uint nbTests = 1000000;
  uint passedTests = 0;
  for(uint i=0; i<nbTests; ++i) {
    a = uniformRealDistribution(generator);
    b = uniformRealDistribution(generator);
    if (a > b) {
      swap(a,b);
    }
    
    if (a < 0.5*l && b-a < 0.5*l && l-b < 0.5*l) {
      passedTests ++;
    }
  }
  std::cout << "passedTests : " << passedTests << std::endl;
  double proba = (double) passedTests / (double) nbTests;
  std::cout << "proba : " << proba << std::endl;
  return 0;
}
